function multicart() {
    /*
  
  # Scenario 1: User is not logged in
  if user is not logged in:
      # Create a cart for the guest user (if not already created)
      if guest cart does not exist:
          create a new cart for the guest user
      else:
          retrieve the guest cart
  
      # Allow user to add, remove, or view items in the guest cart
  
  # Scenario 2: User is logged in
  if user is logged in:
      # Retrieve the user's cart
      retrieve the user's cart based on their userID
      
      # Allow user to add, remove, or view items in their cart
      if user adds or removes items:
          update the cart items accordingly in the CartItems table
  
  # Scenario 3: User had a cart as a guest then logs in
  if user was a guest and now logs in:
      # Merge the guest cart with the user's cart
      retrieve the guest cart and user's cart
      for each item in guest cart:
          if the same item exists in user's cart:
              update the quantity in the user's cart
          else:
              add the item to the user's cart
      delete the guest cart
  
  # Scenario 4: User logs out
  if user logs out:
      # Clear the user's cart (or keep it for future reference)
      mark the user's cart as "inactive" or delete it
  
  # Displaying cart contents and checkout logic would come here
  # This would involve querying the CartItems table to fetch cart details
  
  # Proceed to checkout logic would involve processing the cart items and creating orders
  
  
  */
}



{
    /*
    is there a cart in the bd already?
  
        no  : 1. create new cart and store the info with user email
              2. return a cookie to user 
  
        yes : is there items in the guest cart
            
            yes : 1. get guest id username and store it
                  2. replace all items with that cart ID to use the DB cartID // merge carts
                  3. update the cart moded field
                  4. return cookie to user with updated information. 
  
            no  : 1. get the cart info and return it as cookie
    */
}

// !!!!! change logged in cookie to 15 minutes !!!!!

function onecart() {
    /* One Cart revision strategy
  
    Guest user Logic.
  
      is there a local cart already?
  
      no  : 1. create new cart and store the info
            2. add cart to DB
            3. return a cookie to user 
  
      yes : 1. Check if cart starts with "guest :"

              Does it start with guest?

              No  : 1. replace the cart with a new one
                    2. store cart in db
                    3. return cookie to user

              Yes : 1. grab local cart inforamtion and store it
                    2. Chceck if there is a cart in the db matching same username

                    is there a cart in the DB with the same username?

                    Yes : 1. store the information to the databse
                          2. udpate the 'updated' field in the DB
                          3. return a cookie to the useer with updated info

                    no  : 1. create new cart and store the info
                          2. add cart to DB
                          3. return a cookie to user          
              
    Logging in user logic.
      
      is there a local cart?

      yes   :  1. Grab local cart infomation and store it 
               2. Check if there is a cart in the DB with same emailID

                is there a cart in the DB with same emailID

                yes : 1. change all items in db using local cartID to use existing DB cartID.
                      2. change the 'updated' field in the DB to reflect new timestamp.
                      3. change the local cart userID to user EmailID.
                      4. Change local cartID to use existing DB cartID.
                      5. Store the informatio in a cookie to be sent back to user

                no  : 1. change local cart userID to EmailID
                      2. store information into DB
                      3. return cookie to user with the updated information

      no   :   1. Check if there is a cart in the DB with same emailID

                is there a cart in the DB with same emailID

                yes : 1. return cart as cookie to the user
                
                no  : Do absolutley nothing
        
    Logged in user logic
  
      is there a cart already in the db?
  
      no  : 1. create new cart and store the info with user email
            2. return a cookie to user.
      
      yes : 1. Update the information in the cart
            2. update the moded
            3. return cookie to user. 
  
  */
}

async function updateModifedInDB(connection, cart, res, req) {
  try {
    const { userID, cartID, created, updated } = cart;

    // SQL query 1 (using promise-based API)
    const insertCartQuery = "UPDATE carts SET modified = ? WHERE cart_id = ?";
    const insertCartValues = [updated, cartID];
    const [cartResults] = await connection.promise().query(insertCartQuery, insertCartValues);

    // SQL query 2 (using promise-based API)
    const { color, size, quantity, productID, entryID } = req.body;
    const insertItemsQuery = "INSERT INTO cart_items (cart_id, entry_id, product_id, color, size, quantity) VALUES (?,?,?,?,?,?)";
    const insertItemsValues = [cartID, entryID, productID, color, size, quantity];
    const [itemsResults] = await connection.promise().query(insertItemsQuery, insertItemsValues);

    function determineUser() {
      if (userID.startsWith("Guest :")) {
        return "Guest User";
      } else {
        return userID;
      }
    }

    // Handle response here
    res
      .cookie("cart", cart, { maxAge: 3600000 })
      .status(200)
      .send(`Cart saved for ${determineUser()}.`);
  } catch (error) {
    // Handle any error
    console.error(error);
    res.status(500).send("Error saving cart. Please try again");
  }
}



  